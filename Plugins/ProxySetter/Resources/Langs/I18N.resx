<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfirmCloseWinWithoutSave" xml:space="preserve">
    <value>Discard unsaved changes and close this window?</value>
  </data>
  <data name="CopyFail" xml:space="preserve">
    <value>Copy fail!</value>
  </data>
  <data name="CopySuccess" xml:space="preserve">
    <value>Copied to clipboard.</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Auto update system proxy setting.</value>
  </data>
  <data name="DetectRouteConfigFailed" xml:space="preserve">
    <value>Detect route config failed!</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Done.</value>
  </data>
  <data name="ExeNotFound" xml:space="preserve">
    <value>Exe file not found!
{0}</value>
  </data>
  <data name="Failed" xml:space="preserve">
    <value>Failed!</value>
  </data>
  <data name="GlobalProxyRequireHttpServer" xml:space="preserve">
    <value>Global proxy require http server!</value>
  </data>
  <data name="LaunchNotepadFail" xml:space="preserve">
    <value>Launch notepad fail!</value>
  </data>
  <data name="MiDirect" xml:space="preserve">
    <value>Direct</value>
  </data>
  <data name="MiGlobal" xml:space="preserve">
    <value>System</value>
  </data>
  <data name="MiNone" xml:space="preserve">
    <value>Manual</value>
  </data>
  <data name="MiPAC" xml:space="preserve">
    <value>PAC</value>
  </data>
  <data name="NoServerCapableOfSysProxy" xml:space="preserve">
    <value>No server capable to be system proxy.</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="PacProxyRequireSocksOrHttpServer" xml:space="preserve">
    <value>PAC proxy require socks or http server.</value>
  </data>
  <data name="PacServerIsOff" xml:space="preserve">
    <value>PAC server is not running.</value>
  </data>
  <data name="PacServerIsOn" xml:space="preserve">
    <value>PAC server is running.</value>
  </data>
  <data name="ParseKeyCodeFail" xml:space="preserve">
    <value>Try to parse hotkey fail!
Please check hotkey settings in ProxySetter plug-in.</value>
  </data>
  <data name="PleaseConfigTunaFirst" xml:space="preserve">
    <value>Please config Tuna in option window of this plug-in.
And then click generate-button.</value>
  </data>
  <data name="RegHotKeySuccess" xml:space="preserve">
    <value>Register hot key success!</value>
  </data>
  <data name="RegistHotkeyFail" xml:space="preserve">
    <value>Try to regist global hotkey fail!
Please make sure hotkey is not taken by other application.</value>
  </data>
  <data name="SetAsSysProxy" xml:space="preserve">
    <value>Set as system proxy.</value>
  </data>
  <data name="StartPacServFail" xml:space="preserve">
    <value>Start PAC server fail. 
Please check port setting.</value>
  </data>
  <data name="SysProxyChangeTo" xml:space="preserve">
    <value>Current system proxy is pointing to </value>
  </data>
  <data name="SystemProxySettingRemain" xml:space="preserve">
    <value>System proxy settings remain the same.</value>
  </data>
  <data name="SystemProxySettingUpdated" xml:space="preserve">
    <value>System proxy setting updated.</value>
  </data>
  <data name="TunaIsRunning" xml:space="preserve">
    <value>Tuna is running.</value>
  </data>
  <data name="TunaStarts" xml:space="preserve">
    <value>Tuna starts.</value>
  </data>
  <data name="TunaStopped" xml:space="preserve">
    <value>Tuna stopped.</value>
  </data>
  <data name="UnregisterHotKey" xml:space="preserve">
    <value>Unregister hot key {0}</value>
  </data>
  <data name="UsageReadme" xml:space="preserve">
    <value>In order to use Tuna, you have to download these two binaries:
https://www.wintun.net/
https://github.com/xjasonlyu/tun2socks
Please read the online manual first. (simple chinese)

This plug-in use the following project as the default PAC source.
https://github.com/txthinking/blackwhite
https://github.com/Loyalsoldier/v2ray-rules-dat

You can modify the default PAC in tab “setting” as follows.

// this is a comment


// add domain or IP or CIDR

example.com
192.168.1.1

192.168.1.0/24


// remove domain or IP or CIDR

-example.com
-192.168.1.1
-192.168.1.0/24</value>
  </data>
  <data name="VisitPacDebugger" xml:space="preserve">
    <value>Visit PAC debugger webpage?</value>
  </data>
  <data name="WriteFileFail" xml:space="preserve">
    <value>Write file fail!</value>
  </data>
</root>